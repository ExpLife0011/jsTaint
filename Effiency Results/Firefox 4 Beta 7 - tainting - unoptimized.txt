Dynamic Taint Library Performance Tests
toLowerCase - untainted String test

Time in milliseconds for String.toLowerCase to run 100,000 times with the initial string untainted. The String is predefined. I repeated this test 10 times and found the average and the standard deviation. Lower time means better Performance.
Sum: 8627
Average: 862.7
St-DEV: 71.6132358964148
toLowerCase - tainted String test

Time in milliseconds for String.toLowerCase to run 100,000 times with the initial string tainted. The String is predefined. I repeated this test 10 times and found the average and the standard deviation. Lower time means better Performance.
Sum: 8545
Average: 854.5
St-DEV: 62.06493015830724
concat - tainted String test

In this test, I compared how long it took String.concat to run for each implementation. I chose the String.concat function because that is heavily used in many websites. I started with a string initialized with a value of a single random digit. I ran the function String.concat 100,000 times with a single random digit generated on the spot. I repeated this test 10 times and found the average and the standard deviation. Lower time means better Performance. (Time in Milliseconds)
Sum: 9475
Average: 947.5
St-DEV: 77.8977249703453
Google V8 Benchmarks

This page contains a suite of pure JavaScript benchmarks that we have used to tune V8. The final score is computed as the geometric mean of the individual results to make it independent of the running times of the individual benchmarks and of a reference system (score 100). Higher scores means better performance: Bigger is better!

    Richards
    OS kernel simulation benchmark, originally written in BCPL by Martin Richards (539 lines).
    DeltaBlue
    One-way constraint solver, originally written in Smalltalk by John Maloney and Mario Wolczko (880 lines).
    Crypto
    Encryption and decryption benchmark based on code by Tom Wu (1698 lines).
    RayTrace
    Ray tracer benchmark based on code by Adam Burmister (904 lines).
    EarleyBoyer
    Classic Scheme benchmarks, translated to JavaScript by Florian Loitsch's Scheme2Js compiler (4684 lines).
    RegExp
    Regular expression benchmark generated by extracting regular expression operations from 50 of the most popular web pages (1761 lines).
    Splay
    Data manipulation benchmark that deals with splay trees and exercises the automatic memory management subsystem (394 lines).

Running: 100% completed.
Richards: 4579
DeltaBlue: 2955
Crypto: error
RayTrace: 990
EarleyBoyer: 2634
RegExp: error
Splay: 1270
